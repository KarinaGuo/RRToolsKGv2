rm(K)
for (K in 2:Kvals) {
ce           <- cross.entropy(snmf_project, K = K)
Rbest        <- which.min(ce)
qmatrix = Q(snmf_project, K = K, run=Rbest)
ind_Q_file  <- paste(basedir,species,"/popgen/",treatment,"/lea/",species,"_",dataset,"_K",K,"_indQ.txt", sep="")
vals <- cbind(d$meta$site, d$meta$long, d$meta$lat, qmatrix)
colnames(vals)[1:3] <- c("site", "long", "lat")
#rownames(vals)      <- rownames(d$gt)
write.table(vals, ind_Q_file, quote=FALSE, col.names=TRUE, row.names=TRUE,sep=",")
if ( is.null(pop) ) {
cat("   If output arrange by population is desired, supply a vector of pop memberships")
} else {
pop_Q_file  <- paste(basedir,species,"/popgen/",treatment,"/lea/",species,"_",dataset,"_K",K,"_popQ.txt", sep="")
pop_Q_fig   <- paste(basedir,species,"/popgen/",treatment,"/lea/",species,"_",dataset,"_K",K,"_popQ.pdf", sep="")
pop_Q_vals <- mat.or.vec(length(unique(pop)), K)
pop_ll     <- mat.or.vec(length(unique(pop)), 2)
rownames(pop_Q_vals) <- unique(pop)
rownames(pop_ll) <- unique(pop)
for ( p in unique(pop) ){
qpop <- qmatrix[pop == p,]
if (length(which(pop == p)) == 1) {
pop_Q_vals[p,] = qpop
pop_ll[p,]     = c(d$meta$long[pop == p], d$meta$lat[pop == p])
} else {
pop_Q_vals[p,] = apply(qpop, 2, mean)
pop_ll[p,] = apply(cbind(d$meta$long, d$meta$lat)[pop == p,], 2, mean)
}
}
if (any(is.na(d$meta$long))==TRUE | any(is.na(d$meta$lat))==TRUE ) {
cat("   Data includes NA's and will be dropped for plot
")
}
pop_vals <- cbind(unique(pop), pop_ll, pop_Q_vals)
write.table(pop_vals, pop_Q_file, quote=FALSE, sep=",")
require(mapplots)
require(maps)
require(mapdata)
tmp_pop_ll <- na.omit(pop_ll)
tmp_pop_Q_vals <- subset(pop_Q_vals, rownames(pop_Q_vals) %in% rownames(tmp_pop_ll))
pdf(file=pop_Q_fig)
plot(tmp_pop_ll[,1:2], xlab = "Longitude", ylab = "Latitude", type = "n")
map(add = T, col = "grey90", fill = TRUE)
cols = c("red", "blue", "yellow", "green", "gray","orange","violet","lightgreen")[1:K]
for (i in 1:length(unique(row.names(tmp_pop_Q_vals)))){
add.pie(z = tmp_pop_Q_vals[i,], x = tmp_pop_ll[i,1], y = tmp_pop_ll[i,2], labels = "",
col = cols, radius=0.15)
}
dev.off()
}
return(lea_dir)
}
View(vals)
for (K in 2:Kvals) {
ce           <- cross.entropy(snmf_project, K = K)
Rbest        <- which.min(ce)
qmatrix = Q(snmf_project, K = K, run=Rbest)
ind_Q_file  <- paste(basedir,species,"/popgen/",treatment,"/lea/",species,"_",dataset,"_K",K,"_indQ.txt", sep="")
vals <- cbind(d$meta$site, d$meta$long, d$meta$lat, qmatrix)
colnames(vals)[1:3] <- c("site", "long", "lat")
#rownames(vals)      <- rownames(d$gt)
write.table(vals, ind_Q_file, quote=FALSE, col.names=TRUE, row.names=TRUE,sep=",")
if ( is.null(pop) ) {
cat("   If output arrange by population is desired, supply a vector of pop memberships")
} else {
pop_Q_file  <- paste(basedir,species,"/popgen/",treatment,"/lea/",species,"_",dataset,"_K",K,"_popQ.txt", sep="")
pop_Q_fig   <- paste(basedir,species,"/popgen/",treatment,"/lea/",species,"_",dataset,"_K",K,"_popQ.pdf", sep="")
pop_Q_vals <- mat.or.vec(length(unique(pop)), K)
pop_ll     <- mat.or.vec(length(unique(pop)), 2)
rownames(pop_Q_vals) <- unique(pop)
rownames(pop_ll) <- unique(pop)
for ( p in unique(pop) ){
qpop <- qmatrix[pop == p,]
if (length(which(pop == p)) == 1) {
pop_Q_vals[p,] = qpop
pop_ll[p,]     = c(d$meta$long[pop == p], d$meta$lat[pop == p])
} else {
pop_Q_vals[p,] = apply(qpop, 2, mean)
pop_ll[p,] = apply(cbind(d$meta$long, d$meta$lat)[pop == p,], 2, mean)
}
}
if (any(is.na(d$meta$long))==TRUE | any(is.na(d$meta$lat))==TRUE ) {
cat("   Data includes NA's and will be dropped for plot
")
}
pop_vals <- cbind(unique(pop), pop_ll, pop_Q_vals)
write.table(pop_vals, pop_Q_file, quote=FALSE, sep=",")
require(mapplots)
require(maps)
require(mapdata)
tmp_pop_ll <- na.omit(pop_ll)
tmp_pop_Q_vals <- subset(pop_Q_vals, rownames(pop_Q_vals) %in% rownames(tmp_pop_ll))
pdf(file=pop_Q_fig)
plot(tmp_pop_ll[,1:2], xlab = "Longitude", ylab = "Latitude", type = "n")
map(add = T, col = "grey90", fill = TRUE)
cols = c("red", "blue", "yellow", "green", "gray","orange","violet","lightgreen")[1:K]
for (i in 1:length(unique(row.names(tmp_pop_Q_vals)))){
add.pie(z = tmp_pop_Q_vals[i,], x = tmp_pop_ll[i,1], y = tmp_pop_ll[i,2], labels = "",
col = cols, radius=0.15)
}
dev.off()
}
}
if ( is.null(pop) ) {
cat("   If output arrange by population is desired, supply a vector of pop memberships")
} else {
pop_Q_file  <- paste(basedir,species,"/popgen/",treatment,"/lea/",species,"_",dataset,"_K",K,"_popQ.txt", sep="")
pop_Q_fig   <- paste(basedir,species,"/popgen/",treatment,"/lea/",species,"_",dataset,"_K",K,"_popQ.pdf", sep="")
pop_Q_vals <- mat.or.vec(length(unique(pop)), K)
pop_ll     <- mat.or.vec(length(unique(pop)), 2)
rownames(pop_Q_vals) <- unique(pop)
rownames(pop_ll) <- unique(pop)
for ( p in unique(pop) ){
qpop <- qmatrix[pop == p,]
if (length(which(pop == p)) == 1) {
pop_Q_vals[p,] = qpop
pop_ll[p,]     = c(d$meta$long[pop == p], d$meta$lat[pop == p])
} else {
pop_Q_vals[p,] = apply(qpop, 2, mean)
pop_ll[p,] = apply(cbind(d$meta$long, d$meta$lat)[pop == p,], 2, mean)
}
}
if (any(is.na(d$meta$long))==TRUE | any(is.na(d$meta$lat))==TRUE ) {
cat("   Data includes NA's and will be dropped for plot
")
}
pop_vals <- cbind(unique(pop), pop_ll, pop_Q_vals)
write.table(pop_vals, pop_Q_file, quote=FALSE, sep=",")
require(mapplots)
require(maps)
require(mapdata)
tmp_pop_ll <- na.omit(pop_ll)
tmp_pop_Q_vals <- subset(pop_Q_vals, rownames(pop_Q_vals) %in% rownames(tmp_pop_ll))
pdf(file=pop_Q_fig)
plot(tmp_pop_ll[,1:2], xlab = "Longitude", ylab = "Latitude", type = "n")
map(add = T, col = "grey90", fill = TRUE)
cols = c("red", "blue", "yellow", "green", "gray","orange","violet","lightgreen")[1:K]
for (i in 1:length(unique(row.names(tmp_pop_Q_vals)))){
add.pie(z = tmp_pop_Q_vals[i,], x = tmp_pop_ll[i,1], y = tmp_pop_ll[i,2], labels = "",
col = cols, radius=0.15)
}
dev.off()
}
for (K in 2:Kvals) {
ce           <- cross.entropy(snmf_project, K = K)
Rbest        <- which.min(ce)
qmatrix = Q(snmf_project, K = K, run=Rbest)
ind_Q_file  <- paste(basedir,species,"/popgen/",treatment,"/lea/",species,"_",dataset,"_K",K,"_indQ.txt", sep="")
vals <- cbind(d$meta$site, d$meta$long, d$meta$lat, qmatrix)
colnames(vals)[1:3] <- c("site", "long", "lat")
#rownames(vals)      <- rownames(d$gt)
write.table(vals, ind_Q_file, quote=FALSE, col.names=TRUE, row.names=TRUE,sep=",")
if ( is.null(pop) ) {
cat("   If output arrange by population is desired, supply a vector of pop memberships")
} else {
pop_Q_file  <- paste(basedir,species,"/popgen/",treatment,"/lea/",species,"_",dataset,"_K",K,"_popQ.txt", sep="")
pop_Q_fig   <- paste(basedir,species,"/popgen/",treatment,"/lea/",species,"_",dataset,"_K",K,"_popQ.pdf", sep="")
pop_Q_vals <- mat.or.vec(length(unique(pop)), K)
pop_ll     <- mat.or.vec(length(unique(pop)), 2)
rownames(pop_Q_vals) <- unique(pop)
rownames(pop_ll) <- unique(pop)
for ( p in unique(pop) ){
qpop <- qmatrix[pop == p,]
if (length(which(pop == p)) == 1) {
pop_Q_vals[p,] = qpop
pop_ll[p,]     = c(d$meta$long[pop == p], d$meta$lat[pop == p])
} else {
pop_Q_vals[p,] = apply(qpop, 2, mean)
pop_ll[p,] = apply(cbind(d$meta$long, d$meta$lat)[pop == p,], 2, mean)
}
}
if (any(is.na(d$meta$long))==TRUE | any(is.na(d$meta$lat))==TRUE ) {
cat("   Data includes NA's and will be dropped for plot
")
}
pop_vals <- cbind(unique(pop), pop_ll, pop_Q_vals)
write.table(pop_vals, pop_Q_file, quote=FALSE, sep=",")
require(mapplots)
require(maps)
require(mapdata)
tmp_pop_ll <- na.omit(pop_ll)
tmp_pop_Q_vals <- subset(pop_Q_vals, rownames(pop_Q_vals) %in% rownames(tmp_pop_ll))
pdf(file=pop_Q_fig)
plot(tmp_pop_ll[,1:2], xlab = "Longitude", ylab = "Latitude", type = "n")
map(add = T, col = "grey90", fill = TRUE)
cols = c("red", "blue", "yellow", "green", "gray","orange","violet","lightgreen")[1:K]
for (i in 1:length(unique(row.names(tmp_pop_Q_vals)))){
add.pie(z = tmp_pop_Q_vals[i,], x = tmp_pop_ll[i,1], y = tmp_pop_ll[i,2], labels = "",
col = cols, radius=0.15)
}
dev.off()
}
if ( is.null(pop) ) {
cat("   If output arrange by population is desired, supply a vector of pop memberships")
} else {
pop_Q_file  <- paste(basedir,species,"/popgen/",treatment,"/lea/",species,"_",dataset,"_K",K,"_popQ.txt", sep="")
pop_Q_fig   <- paste(basedir,species,"/popgen/",treatment,"/lea/",species,"_",dataset,"_K",K,"_popQ.pdf", sep="")
pop_Q_vals <- mat.or.vec(length(unique(pop)), K)
pop_ll     <- mat.or.vec(length(unique(pop)), 2)
rownames(pop_Q_vals) <- unique(pop)
rownames(pop_ll) <- unique(pop)
for ( p in unique(pop) ){
qpop <- qmatrix[pop == p,]
if (length(which(pop == p)) == 1) {
pop_Q_vals[p,] = qpop
pop_ll[p,]     = c(d$meta$long[pop == p], d$meta$lat[pop == p])
} else {
pop_Q_vals[p,] = apply(qpop, 2, mean)
pop_ll[p,] = apply(cbind(d$meta$long, d$meta$lat)[pop == p,], 2, mean)
}
}
if (any(is.na(d$meta$long))==TRUE | any(is.na(d$meta$lat))==TRUE ) {
cat("   Data includes NA's and will be dropped for plot
")
}
pop_vals <- cbind(unique(pop), pop_ll, pop_Q_vals)
write.table(pop_vals, pop_Q_file, quote=FALSE, sep=",")
require(mapplots)
require(maps)
require(mapdata)
tmp_pop_ll <- na.omit(pop_ll)
tmp_pop_Q_vals <- subset(pop_Q_vals, rownames(pop_Q_vals) %in% rownames(tmp_pop_ll))
pdf(file=pop_Q_fig)
plot(tmp_pop_ll[,1:2], xlab = "Longitude", ylab = "Latitude", type = "n")
map(add = T, col = "grey90", fill = TRUE)
cols = c("red", "blue", "yellow", "green", "gray","orange","violet","lightgreen")[1:K]
for (i in 1:length(unique(row.names(tmp_pop_Q_vals)))){
add.pie(z = tmp_pop_Q_vals[i,], x = tmp_pop_ll[i,1], y = tmp_pop_ll[i,2], labels = "",
col = cols, radius=0.15)
}
dev.off()
}}
setwd("~/RBGSyd_Technical Officer/RnR/RRTools")
setwd("~/RBGSyd_Technical Officer/RnR/RRTools/RRtools")
devtools::document()
remove.packages("RRtools")
.rs.restartR()
setwd("~/RBGSyd_Technical Officer/RnR/RRTools/RRtools")
devtools::install()
library(RRtools)
RRversion      <- "v0002"
RandR_raw      <- "~/RBGSyd_Technical Officer/RnR/data/RandR/raw/"
RandR_analysis <- "~/RBGSyd_Technical Officer/RnR/data/RandR/analysis/"
RandR_vbase    <- paste(RandR_analysis, RRversion, "/", sep="")
RandR_param    <- paste(RandR_analysis, RRversion, "/params/", sep="")
param_file     <- "RRStandardFilterParams"
species_file   <- "RRSpeciesList"
#sampledb_file  <- "/data/RandR/tissueDB/tissueSampleTable.01Apr2019.csv"
sampledb_file  <- "~/RBGSyd_Technical Officer/RnR/Tissue-2023-01-19_163634.csv"
p            <- RR_standard_filters(RandR_param, param_file)
s            <- RR_species_params(RandR_param, species_file)
ns <- length(s)
#spp_ind <- c(31)
#spp_ind <- c(34, 35, 36)
#spp_ind <- c(37)
#spp_ind <- c(38)
#spp_ind <- c(42, 43, 44, 45)
#spp_ind <- c(46, 47, 10)
#spp_ind <- c(50,58)
#spp_ind <- c(40, 45, 60, 61)
#spp_ind <- c(45)
spp_ind <- c(21)
for (sp in spp_ind) {
cat("Commencing filtering of species: ", s[[sp]]$species, "\n")
species  <- s[[sp]]$species
dataset  <- s[[sp]]$dataset
fnum     <- s[[sp]]$fnum
g1           <- read_dart_onerow_csv(RandR_raw,species,dataset,misschar="-", altcount=TRUE, seq2fa=FALSE, fnum=fnum)
m1_std       <- query_RR_data_base(g1, RandR_vbase, species, dataset, sampledb_file)
g1$treatment <- paste("RR", RRversion, "_", g1$treatment, sep="")
g1_std       <- write_dart_data(g1, RandR_vbase, species, dataset)
qc1          <- report_dart_qc_stats(g1, RandR_vbase, species, dataset, threshold_missing_loci=p$threshold_missing_loci)
g2           <- remove.poor.quality.snps(g1, min_repro=p$min_repro, max_missing=p$max_missing)
qc2          <- report.dart.qc.stats(g2, RandR_vbase, species, dataset)
g3           <- sample.one.snp.per.locus.random(g2, seed=p$seed)
qc3          <- report.dart.qc.stats(g3, RandR_vbase, species, dataset)
m1           <- read_meta_info(g3, RandR_vbase, species, dataset, version="db")
#m_tmp <- as.data.frame(do.call(cbind, m1))
#m_tmp <- m_tmp[m_tmp$lat!=1 & !is.na(m_tmp$long), ]
gm           <- merge_gt_meta_data(g3, m1)
gm_std       <- write_dart_data(gm, RandR_vbase, species, dataset)
}
##RR_preliminary_analysis.R############################################################################
library(RRtools)
RRversion      <- "v0002"
RandR_raw      <- "~/RBGSyd_Technical Officer/RnR/data/RandR/raw/"
RandR_analysis <- "~/RBGSyd_Technical Officer/RnR/data/RandR/analysis/"
RandR_vbase    <- paste(RandR_analysis, RRversion, "/", sep="")
RandR_param    <- paste(RandR_analysis, RRversion, "/params/", sep="")
param_file     <- "RRStandardFilterParams"
species_file   <- "RRSpeciesList"
#sampledb_file  <- "/data/RandR/tissueDB/tissueSampleTable.23Feb2018.csv"
p            <- RR_standard_filters(RandR_param, param_file)
s            <- RR_species_params(RandR_param, species_file)
ns <- length(s)
spp_ind <- c(21)
#sp=21
cat("Commencing preliminary analyses of species: ", s[[sp]]$species, "\n")
species  <- s[[sp]]$species
dataset  <- s[[sp]]$dataset
treatment  <- paste("RR",RRversion,"_raw_SNPFilt_1SNPperClone",sep="")
gms        <- openRRstandard(RandR_vbase, species, dataset, treatment)
gmsds      <- downsample_snps(gms)
# run PCA
gl_file    <- dart2gl(gmsds, RandR_vbase, species, dataset, return_as_file=TRUE)
preliminary_PCA(gl_file, gmsds, RandR_vbase, species, dataset, gmsds$treatment)
# run sNMF
lea_dir <- RRtools::preliminary_SNMF(gmsds, RandR_vbase, species, dataset, treatment=gmsds$treatment, pop=gmsds$meta$site)
#' Perform preliminary sNMF analysis
#'
#' @param basedir -- name of the base directory for R&R
#' @param species -- species name
#' @param dataset -- dataset name
#' @param treatment
#' @param pop     -- a vector of population assignments
#' @param Ksel    -- the selected number of ancestral populations
#' @return file name
#' @author Jason Bragg (jasongbragg@gmail.com)
#' @export
#' @examples
#' \dontrun{
#' gdm_files <- SNMF2gdm(basedir, species, dataset, treatment, process=TRUE, Ksel=2)
#' }
preliminary_SNMF <- function(dart_data, basedir, species, dataset, treatment, pop=NULL, Kvals=8, Rvals=4) {
require(LEA)
d <- dart_data
lea_file   <- dart2lea(d, basedir, species, dataset)
lea_dir    <- paste(basedir,species,"/popgen/",treatment,"/lea", sep="")
lea_plot   <- paste(basedir,species,"/popgen/",treatment,"/lea/K_ce.pdf", sep="")
snmf_project <- snmf(lea_file, K=2:Kvals, entropy = TRUE, repetitions = Rvals, project = "new")
print("Creating lea plot")
pdf(file=lea_plot)
tryCatch(plot(snmf_project, lwd = 5, col = "red", pch=1), error = function(err) print("Lea plot failed, try sourcing code externally
"))
dev.off()
suppressWarnings(for (K in 2:Kvals) {
ce           <- cross.entropy(snmf_project, K = K)
Rbest        <- which.min(ce)
qmatrix = Q(snmf_project, K = K, run=Rbest)
ind_Q_file  <- paste(basedir,species,"/popgen/",treatment,"/lea/",species,"_",dataset,"_K",K,"_indQ.txt", sep="")
vals <- cbind(d$meta$site, d$meta$long, d$meta$lat, qmatrix)
colnames(vals)[1:3] <- c("site", "long", "lat")
#rownames(vals)      <- rownames(d$gt)
write.table(vals, ind_Q_file, quote=FALSE, col.names=TRUE, row.names=TRUE,sep=",")
if ( is.null(pop) ) {
cat("   If output arrange by population is desired, supply a vector of pop memberships")
} else {
pop_Q_file  <- paste(basedir,species,"/popgen/",treatment,"/lea/",species,"_",dataset,"_K",K,"_popQ.txt", sep="")
pop_Q_fig   <- paste(basedir,species,"/popgen/",treatment,"/lea/",species,"_",dataset,"_K",K,"_popQ.pdf", sep="")
pop_Q_vals <- mat.or.vec(length(unique(pop)), K)
pop_ll     <- mat.or.vec(length(unique(pop)), 2)
rownames(pop_Q_vals) <- unique(pop)
rownames(pop_ll) <- unique(pop)
for ( p in unique(pop) ){
qpop <- qmatrix[pop == p,]
if (length(which(pop == p)) == 1) {
pop_Q_vals[p,] = qpop
pop_ll[p,]     = c(d$meta$long[pop == p], d$meta$lat[pop == p])
} else {
pop_Q_vals[p,] = apply(qpop, 2, mean)
pop_ll[p,] = apply(cbind(d$meta$long, d$meta$lat)[pop == p,], 2, mean)
}
}
if (any(is.na(d$meta$long))==TRUE | any(is.na(d$meta$lat))==TRUE ) {
cat("   Data includes NA's and will be dropped for plot
")
}
pop_vals <- cbind(unique(pop), pop_ll, pop_Q_vals)
write.table(pop_vals, pop_Q_file, quote=FALSE, sep=",")
require(mapplots)
require(maps)
require(mapdata)
tmp_pop_ll <- na.omit(pop_ll)
tmp_pop_Q_vals <- subset(pop_Q_vals, rownames(pop_Q_vals) %in% rownames(tmp_pop_ll))
pdf(file=pop_Q_fig)
plot(tmp_pop_ll[,1:2], xlab = "Longitude", ylab = "Latitude", type = "n")
map(add = T, col = "grey90", fill = TRUE)
cols = c("red", "blue", "yellow", "green", "gray","orange","violet","lightgreen")[1:K]
for (i in 1:length(unique(row.names(tmp_pop_Q_vals)))){
add.pie(z = tmp_pop_Q_vals[i,], x = tmp_pop_ll[i,1], y = tmp_pop_ll[i,2], labels = "",
col = cols, radius=0.15)
}
dev.off()
}})
return(lea_dir)
}
# run sNMF
lea_dir <- preliminary_SNMF(gmsds, RandR_vbase, species, dataset, treatment=gmsds$treatment, pop=gmsds$meta$site)
source("/data/RandR/analysis/v0002/control_scripts/final_read_filter_check.r")
source("~/RBGSyd_Technical Officer/RnR/data/RandR/final_read_filter_check.r")
source("~/RBGSyd_Technical Officer/RnR/final_read_filter_check.r")
analysis   <- "~/RBGSyd_Technical Officer/RnR/data/RandR/analysis/"
species  <- "ActiHeli"
dataset  <- "DAct19-4163"
RRversion      <- "v0002"
RandR_raw      <- "~/RBGSyd_Technical Officer/RnR/data/RandR/raw/"
RandR_analysis <- "~/RBGSyd_Technical Officer/RnR/data/RandR/analysis/"
RandR_vbase    <- paste(RandR_analysis, RRversion, "/", sep="")
field          <- "RR1"
RR1_check <- final_read_filter_check(RandR_vbase, species=species, dataset=dataset, RRversion=RRversion, field=field)
field          <- "RR2"
RR2_check <- final_read_filter_check(RandR_vbase, species=species, dataset=dataset, RRversion=RRversion, field=field)
field          <- "RR3"
RR3_check <- final_read_filter_check(RandR_vbase, species=species, dataset=dataset, RRversion=RRversion, field=field)
load(RR3_check$data)
gmvf <- dart_data
lea_dir <- preliminary_SNMF(gmvf, RandR_vbase, species, dataset, treatment=gmvf$treatment, pop=gmvf$meta$analyses[[field]])
gmvf <- dart_data
lea_dir <- preliminary_SNMF(gmvf, RandR_vbase, species, dataset, treatment=gmvf$treatment, pop=gmvf$meta$analyses[[field]])
#' Perform preliminary sNMF analysis
#'
#' @param basedir -- name of the base directory for R&R
#' @param species -- species name
#' @param dataset -- dataset name
#' @param treatment
#' @param pop     -- a vector of population assignments
#' @param Ksel    -- the selected number of ancestral populations
#' @return file name
#' @author Jason Bragg (jasongbragg@gmail.com)
#' @export
#' @examples
#' \dontrun{
#' gdm_files <- SNMF2gdm(basedir, species, dataset, treatment, process=TRUE, Ksel=2)
#' }
preliminary_SNMF <- function(dart_data, basedir, species, dataset, treatment, pop=NULL, Kvals=8, Rvals=4) {
require(LEA)
d <- dart_data
lea_file   <- dart2lea(d, basedir, species, dataset)
lea_dir    <- paste(basedir,species,"/popgen/",treatment,"/lea", sep="")
lea_plot   <- paste(basedir,species,"/popgen/",treatment,"/lea/K_ce.pdf", sep="")
lea_file_genotype <- read.lfmm(lea_file)
write.geno(lea_file_genotype, paste0(lea_dir,"/lea_file_genotype.geno", sep=""))
print("Creating lea plot")
pdf(file=lea_plot)
tryCatch(plot(snmf_project, lwd = 5, col = "red", pch=1), error = function(err) print("Lea plot failed, try sourcing code externally                                                                                  "))
dev.off()
suppressWarnings(for (K in 2:Kvals) {
ce           <- cross.entropy(snmf_project, K = K)
Rbest        <- which.min(ce)
qmatrix = Q(snmf_project, K = K, run=Rbest)
ind_Q_file  <- paste(basedir,species,"/popgen/",treatment,"/lea/",species,"_",dataset,"_K",K,"_indQ.txt", sep="")
vals <- cbind(d$meta$site, d$meta$long, d$meta$lat, qmatrix)
colnames(vals)[1:3] <- c("site", "long", "lat")
#rownames(vals)      <- rownames(d$gt)
write.table(vals, ind_Q_file, quote=FALSE, col.names=TRUE, row.names=TRUE,sep=",")
if ( is.null(pop) ) {
cat("   If output arrange by population is desired, supply a vector of pop memberships")
} else {
pop_Q_file  <- paste(basedir,species,"/popgen/",treatment,"/lea/",species,"_",dataset,"_K",K,"_popQ.txt", sep="")
pop_Q_fig   <- paste(basedir,species,"/popgen/",treatment,"/lea/",species,"_",dataset,"_K",K,"_popQ.pdf", sep="")
pop_Q_vals <- mat.or.vec(length(unique(pop)), K)
pop_ll     <- mat.or.vec(length(unique(pop)), 2)
rownames(pop_Q_vals) <- unique(pop)
rownames(pop_ll) <- unique(pop)
for ( p in unique(pop) ){
qpop <- qmatrix[pop == p,]
if (length(which(pop == p)) == 1) {
pop_Q_vals[p,] = qpop
pop_ll[p,]     = c(d$meta$long[pop == p], d$meta$lat[pop == p])
} else {
pop_Q_vals[p,] = apply(qpop, 2, mean)
pop_ll[p,] = apply(cbind(d$meta$long, d$meta$lat)[pop == p,], 2, mean)
}
}
if (any(is.na(d$meta$long))==TRUE | any(is.na(d$meta$lat))==TRUE ) {
cat("   Data includes NA's and will be dropped for plot
")
}
pop_vals <- cbind(unique(pop), pop_ll, pop_Q_vals)
write.table(pop_vals, pop_Q_file, quote=FALSE, sep=",")
require(mapplots)
require(maps)
require(mapdata)
tmp_pop_ll <- na.omit(pop_ll)
tmp_pop_Q_vals <- subset(pop_Q_vals, rownames(pop_Q_vals) %in% rownames(tmp_pop_ll))
pdf(file=pop_Q_fig)
plot(tmp_pop_ll[,1:2], xlab = "Longitude", ylab = "Latitude", type = "n")
map(add = T, col = "grey90", fill = TRUE)
cols = c("red", "blue", "yellow", "green", "gray","orange","violet","lightgreen")[1:K]
for (i in 1:length(unique(row.names(tmp_pop_Q_vals)))){
add.pie(z = tmp_pop_Q_vals[i,], x = tmp_pop_ll[i,1], y = tmp_pop_ll[i,2], labels = "",
col = cols, radius=0.15)
}
dev.off()
}})
return(lea_dir)
}
lea_dir <- preliminary_SNMF(gmvf, RandR_vbase, species, dataset, treatment=gmvf$treatment, pop=gmvf$meta$analyses[[field]])
# run sNMF
lea_dir <- preliminary_SNMF(gmsds, RandR_vbase, species, dataset, treatment=gmsds$treatment, pop=gmsds$meta$site)
.rs.restartR()
remove.packages("RRtools")
setwd("~/RBGSyd_Technical Officer/RnR/RRTools/RRtools")
devtools::document()
devtools::install()
rm(preliminary_SNMF())
remove.packages("RRtools")
.rs.restartR()
.rs.restartR()
remove.packages("RRtools")
rm(preliminary_SNMF())
rm(preliminary_SNMF
)
setwd("~/RBGSyd_Technical Officer/RnR/RRTools/RRtools")
devtools::document
devtools::document()
devtools::install()
library(RRtools)
# run sNMF
lea_dir <- RRtools::preliminary_SNMF(gmsds, RandR_vbase, species, dataset, treatment=gmsds$treatment, pop=gmsds$meta$site)
lea_dir <- RRtools::preliminary_SNMF(gmvf, RandR_vbase, species, dataset, treatment=gmvf$treatment, pop=gmvf$meta$analyses[[field]])
gmvf$treatment
